import openpyxl
import json
from datetime import datetime
import sys
from dateutil.parser import parse
from openpyxl.utils.datetime import from_excel

def main():
    try:
        # Load the Excel workbook and select Sheet1
        workbook = openpyxl.load_workbook('Saida_Valorize.xlsx', data_only=True)
        sheet = workbook['Sheet1']

        # Prompt user for nu_operacao
        try:
            nu_operacao = int(input("Please enter Operation Number: "))
        except ValueError:
            print("Invalid input. Please enter an integer for Operation Number.")
            sys.exit(1)

        # Get current date and time in the specified format
        current_datetime = datetime.now().strftime("%Y-%m-%dT%H:%M:%S")
        current_date = datetime.now().strftime("%Y-%m-%dT00:00:00")

        # Initialize lists and sums
        itens_list = []
        sum_vl_valor = 0.0
        sum_vl_desagio = 0.0

        # Iterate over the rows in the Excel sheet
        for idx, row in enumerate(sheet.iter_rows(min_row=2), start=2):
            # Extract cell objects from each column
            vl_valor_cell = row[0]            # Column A
            dt_vencimento_cell = row[1]       # Column B
            sacado_cd_cnpjcpf_cell = row[2]   # Column C
            nu_documento_cell = row[5]        # Column F
            vl_desagio_cell = row[7]          # Column H

            # Get cell values, providing defaults if necessary
            vl_valor = vl_valor_cell.value if vl_valor_cell.value is not None else 0.0
            dt_vencimento = dt_vencimento_cell.value
            sacado_cd_cnpjcpf = str(sacado_cd_cnpjcpf_cell.value) if sacado_cd_cnpjcpf_cell.value is not None else ""
            nu_documento = str(nu_documento_cell.value) if nu_documento_cell.value is not None else ""
            vl_desagio = vl_desagio_cell.value if vl_desagio_cell.value is not None else 0.0

            # Update sums
            sum_vl_valor += vl_valor
            sum_vl_desagio += vl_desagio

            # Now, handle dt_vencimento
            if dt_vencimento is None:
                print(f"dt_vencimento is None in row {idx}.")
                sys.exit(1)
            elif isinstance(dt_vencimento, datetime):
                # If it's already a datetime object, format it
                dt_vencimento_str = dt_vencimento.strftime("%Y-%m-%dT%H:%M:%S")
            elif isinstance(dt_vencimento, (int, float)):
                # Convert Excel serial date to datetime
                try:
                    dt_vencimento_date = from_excel(dt_vencimento)
                    dt_vencimento_str = dt_vencimento_date.strftime("%Y-%m-%dT%H:%M:%S")
                except Exception as e:
                    print(f"Error converting Excel serial date in row {idx}: {e}")
                    sys.exit(1)
            elif isinstance(dt_vencimento, str):
                # If it's a string, attempt to parse it with dayfirst=True
                try:
                    dt_vencimento_date = parse(dt_vencimento, dayfirst=True)
                    dt_vencimento_str = dt_vencimento_date.strftime("%Y-%m-%dT%H:%M:%S")
                except ValueError:
                    print(f"Invalid date format in row {idx} (dt_vencimento): {dt_vencimento}")
                    sys.exit(1)
            else:
                print(f"Unknown date format in row {idx} (dt_vencimento): {dt_vencimento}")
                sys.exit(1)

            # Create item dictionary
            item = {
                "especie_titulo": {"cd_codigo": "CO"},
                "nu_documento": nu_documento,
                "sacado": {"cd_cnpjcpf": sacado_cd_cnpjcpf},
                "dt_emissao": current_date,
                "dt_vencimento": dt_vencimento_str,
                "vl_valor": vl_valor,
                "vl_desagio": vl_desagio,
                "vl_advalorem": None,
                "vl_iof": None,
                "vl_iofadicional": None,
                "nu_parcela": None
            }

            itens_list.append(item)

        # Calculate vl_valor for pagamentos
        pagamentos_vl_valor = sum_vl_valor - sum_vl_desagio

        # Build the JSON structure
        json_data = {
            "id_empresa": "79BA2B47-5606-4DF7-9AB5-E050AD2F8368",
            "id_usuario": "36837045-454C-4005-AA99-80AD7CF2DB13",
            "operacoes": [{
                "nu_operacao": nu_operacao,
                "cd_externo": None,
                "dt_operacao": current_datetime,
                "dt_basecalculos": current_date,
                "cliente": {"cd_cnpjcpf": "26804340000169"},
                "produto": {"de_descricao": "FIDC 1"},
                "conta_bancaria": {"nu_conta": "46047-8"},
                "tx_fatoroperacao": None,
                "tx_advalorem": None,
                "vl_tarifaoperacao": None,
                "lg_naocalcular": False,
                "vl_iofadicional": None,
                "itens": itens_list,
                "despesas": [{
                    "vl_valor": None,
                    "de_descricao": "FIDC 1",
                    "tipo_despesa": {"no_nome": None}
                }],
                "pagamentos": [{
                    "vl_valor": pagamentos_vl_valor,
                    "dt_pagamento": current_datetime,
                    "tipo_pagamento": {"no_nome": "TED"},
                    "conta_bancaria": {"nu_conta": "46045-2"},
                    "conta_bancaria_favorecido": {
                        "nu_banco": None,
                        "nu_agencia": None,
                        "nu_conta": None
                    }
                }],
                "no_tabelaparcelas": None,
                "vl_parcelamento": None,
                "tx_jurosparcelamento": None,
                "qt_parcelas": None,
                "qt_parcelascarencia": None,
                "lg_jurosacumcarencia": False,
                "sacado": {
                    "cd_cnpjcpf": None,
                    "no_nome": None,
                    "cd_ierg": None,
                    "no_endereco": None,
                    "nu_endereco": None,
                    "no_enderecocomplemento": None,
                    "no_bairro": None,
                    "no_municipio": None,
                    "cd_uf": None,
                    "cd_cep": None
                },
                "especie_titulo": {"cd_codigo": None},
                "dt_primeirovencimento": None,
                "lg_vencimentodiautil": False,
                "lg_avisar": False
            }]
        }

        # Write the JSON data to a file
        output_filename = f"Json-{nu_operacao}.json"
        with open(output_filename, 'w', encoding='utf-8') as json_file:
            json.dump(json_data, json_file, ensure_ascii=False, indent=2, default=str)

        print(f"JSON file '{output_filename}' has been created successfully.")

    except FileNotFoundError:
        print("O arquivo Excel 'Saida_Valorize.xlsx' nao foi encontrado.")
    except KeyError:
        print("Sheet 'Sheet1' was not found in the Excel file.")
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
